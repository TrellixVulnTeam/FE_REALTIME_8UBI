<!doctype html>
<html>

<head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet" href="/css/app.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
</head>

<body>

    <div class="app">

        {{> header}}

        <div class="container">
            {{{body}}}
        </div>

        {{> footer}}

    </div>


    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.9/topojson.min.js"></script>
    <script src="//datamaps.github.io/scripts/datamaps.world.min.js?v=1"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
        const socket = io();
        //const chatForm = document.querySelector('#chat-form')
        //const chatMess = document.querySelector('#chat-mes')
        // chatForm.addEventListener('submit', (e) => {
        //     e.preventDefault() 
        //     const message = chatMess.value
        //     socket.emit('chatMessage',
        //         {message: message}
        //     );
        //     chatMess.value = ''
        // })
        //const messages = document.querySelector('#messages')
        socket.on('event', (message) => {
            // const chatItem = document.createElement('li')
            // chatItem.textContent = message;
            // messages.appendChild(chatItem);
            // window.scrollTo(0, document.body.scrollHeight);
            addMessage(JSON.stringify(message));
        })
        /*socket.on('tweets', (message) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('tweets');
            messageElement.innerText = `${JSON.stringify(message)}`;
            const chatContainer = document.getElementById('displayTweets');
            chatContainer.append(messageElement)
        })*/
        function addMessage(data) {
            const messageElement = document.createElement('div')
            messageElement.classList.add('message')
            messageElement.innerText = `${data}`
            // get chatContainer element from our html page
            const chatContainer = document.getElementById('chatContainer')
            // adds the new div to the message container div
            chatContainer.append(messageElement)
        }
    </script>
    <script>
        var worldmap = new Datamap(
            {
                scope: 'world',
                title: 'Sentiment',
                projection: 'equirectangular',
                element: document.getElementById('worldmap'),
                //Disabling popup or hover effects
                geographyConfig: {
                    popupOnHover: false,
                    highlightOnHover: false
                },
                bubblesConfig: {
                    radius: 7,
                    exitDelay: 30000 // Milliseconds
                },
                responsive: true,
                done: function (datamap) {
                    datamap.svg.call(d3.behavior.zoom().on("zoom", redraw));
                    //$("#resetZoom").on("click", function(){ resetZoom(); })
                    function redraw() {
                        datamap.svg.selectAll("g").attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
                    }

                    function resetZoom() {
                        datamap.svg.selectAll("g").attr("transform", "translate(0,0)scale(1.0)");
                    }
                },
                //Changing the default fill colors
                fills: {
                    '0': 'blue',
                    '-1': 'red',
                    '1': 'green',
                    defaultFill: '#E5DBD2',
                },
            }
        );
        worldmap.legend({
            //legendTitle: "Sentiment",
            labels: {
                "1": 'Positive',
                "0": 'Neutral',
                "-1": 'Negative'
            }
        });
        d3.select(window).on('resize', function () {
            worldmap.resize();
        });

        function determineColor(sentiment) {
            var newColor = sentiment == 0 ? "blue" : (sentiment == -1 ? "red" : "green");
            return newColor;
        }
        function determineEmoji(sentiment) {
            var newColor = sentiment == 0 ? "&#x1F44C;" : (sentiment == -1 ? "&#x1F44E;" : "&#128077;");
            return newColor;
        }
        var func = function (geo, data) {
            //var url = "https://twitter.com/" + data.name + "/status/" + data.id;
            var tip = "<div><h3><span style='vertical-align:middle'>@" + data.name + '</span><img style="vertical-align:middle" height="70" width="70" src="' + data.pic + '"></h3></div>';
            tip += "<h6>" + data.date + "</h6>";
            tip += "<h4>" + data.text + "</h4>";
            tip += "Spark MLlib:<font size='6em' color=" + "blue" + ">" + "&#x1F44C;" + "</font>";
            return "<div class='hoverinfo tooltip'>" + tip + '</div>';
        }
        socket.on('tweets', function (tweets) {
            var dataBubble = {
                id: tweets.id,
                name: tweets.screen_name,
                text: tweets.tweet64,
                fillKey: tweets.score,
                radius: 5,
                pic: tweets.url_img,
                date: tweets.timeStamp,
                latitude: tweets.latitude,
                longitude: tweets.longitude
            };

            const bubble_array = [];
            bubble_array.push(dataBubble);
            worldmap.bubbles(bubble_array, {
                popupTemplate: function (geo, data) {
                    var tip = "<div><h3><span style='vertical-align:middle'>@" + data.name + '</span><img style="vertical-align:middle" height="70" width="70" src="' + data.pic + '"></h3></div>';
                    tip += "<h6>" + data.date + "</h6>";
                    tip += "<h4>" + data.text + "</h4>";
                    tip += "Spark MLlib:<font size='6em' color=" + "red" + ">" + "</font>";
                    return "<div  >" + tip + '</div>';
                }
            });
        })
    </script>

    <script>
        socket.on('groupSentiment', function (data) {
            var chart1 = new CanvasJS.Chart("pieChat", {
                theme: "light2", // "light1", "light2", "dark1", "dark2"
                exportEnabled: true,
                animationEnabled: true,
                title: {
                    text: "Sentiments"
                },
                data: [{
                    type: "pie",
                    startAngle: 25,
                    toolTipContent: "<b>{label}</b>: {y}%",
                    showInLegend: "true",
                    legendText: "{label}",
                    indexLabelFontSize: 16,
                    indexLabel: "{label} - {y}%",
                    dataPoints: [
                        { y: (data[2].count / (data[2].count + data[1].count + data[0].count)) * 100, label: data[2]._id },
                        { y: (data[1].count / (data[1].count + data[2].count + data[0].count)) * 100, label: data[1]._id },
                        { y: (data[0].count / (data[0].count + data[1].count + data[2].count)) * 100, label: data[0]._id },
                    ]
                }]
            });
            chart1.render();
        })
/*0: {_id: 'Neutral', count: 189}
                                        1: {_id: 'Negative', count: 43}
                                        2: {_id: 'Positive', count: 44}*/
    </script>
    <script>
        var chart2 = new CanvasJS.Chart("realtimeChart", {
            animationEnabled: true,
            title: {
                text: "QOS - Survey Result"
            },
            axisY: {
                title: "Response values",
                includeZero: true,
                interval: 10
            },
            toolTip: {
                shared: true
            },
            data: [{
                type: "bar",
                name: "Avg. Score",
                toolTipContent: "<b>{label}</b> <br> <span style=\"color:#4F81BC\">{name}</span>: {y}",
                dataPoints: [
                    { y: 0, label: "Positive" },
                    { y: 0, label: "Negative" },
                    { y: 0, label: "Neutral" }
                ]
            }]
        });
        chart2.render();
        socket.on('tweets2', function (data) {
            const labels = ["Positive", "Negative", "Neutral"]
            var dps = chart2.options.data[0].dataPoints;
            dps[0] = {
                label: labels[0],
                y: data.Positive
            }
            dps[1] = {
                label: labels[1],
                y: data.Negative
            }
            dps[2] = {
                label: labels[2],
                y: data.Neutral
            }
            chart2.options.data[0].dataPoints = dps
            chart2.render();
        })
        //function updateChart2() {}
        //updateChart2();
        //setInterval(function () { updateChart2() }, 500);
    </script>
</body>

</html>